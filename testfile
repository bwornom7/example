//It is important to understand what you are doing as much as possible. 

//Add title

#include <iostream>
#include <string>
#include "Mergesort.h"
#include <chrono>
#include <ctime>

void oldMain() 
{
	int vals[] = { 1, 4, 7, 10, 2, 5, 8, 0, 3, 6, 9};
	int aCopy[20] = {0};
	Mergesort::print ("test", vals+0, vals+11);
	Mergesort::append(aCopy+1, vals+0, vals+11);
	Mergesort::print("aCopy", aCopy+0, aCopy+20);

	int a[] = { 1, 3, 5, 7, 9, 11, 0, 1, 2, 3, 4, 5};
	int hold[12];

	Mergesort::merge(a+0, a+6, a+6, a+12, a+0, hold+0, [](int x, int y) { return (x < y); }	);
	
}

void printArray(int array[], int len) 
{
	for (int pos = 0; pos < len; ++pos) 
	{
		std::cout << " " << array[pos];
	}	std::cout << std::endl;
		
		
}

int main() 
{
	

	int vals[] = {20, 17, 14, 11, 8, 5, 2, 1, 4, 7, 10, 13, 16, 19, 0, 3, 6, 9, 12, 15, 18};
	int hold[] ={ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	auto valsBegin = vals + 0;
	auto tempStorage = hold + 0;
	auto precedes = [](int x_, int y_ ) { return (x_ < y_); };
	int N;
	N = 300; 

	std::chrono::time_point<std::chrono::system_clock> start, end;		//some chrono code from cppreference.com
    start = std::chrono::system_clock::now();

	std::cout << "Test case length = " << N << std::endl;
	
	Mergesort::sort(valsBegin, vals+N, tempStorage, precedes);
	
	end = std::chrono::system_clock::now();
	std::chrono::duration<double> elapsed_seconds = end-start;
    std::time_t end_time = std::chrono::system_clock::to_time_t(end);
    std::cout << "finished computation at " << std::ctime(&end_time)
              << "elapsed time: " << elapsed_seconds.count() << "s\n";
	
	printArray(vals, N);
	std::cin >> N;

	
	/*N = 2; 
	std::cout << "Test case length = 2\n";
	Mergesort::sort(valsBegin, vals+N, tempStorage, precedes);
	printArray(vals, N);
	
	N = 3; 
	std::cout << "Test case length = 3\n";
	Mergesort::sort(valsBegin, vals+N, tempStorage, precedes);
	printArray(vals, N);
	
	
	N = 21; 
	std::cout << "Test case length = 21\n";
	Mergesort::sort(valsBegin, vals+N, tempStorage, precedes);
	printArray(vals, N);*/
	

}

